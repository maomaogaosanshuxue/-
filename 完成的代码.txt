node {
    //拉取代码  
   stage ('git checkout') {
       checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '743289c4-9ef4-423a-9951-fe9da6fb334c', url: 'git@47.75.174.233:/home/git/tomcat-java-demo.git']]])
       sh 'ls'
    }
       
   stage ('maven build') { 
     sh '''
        mvn package -Dmaven.test.skip=ture
        ls
        '''
    }
   stage ('build and push | image') {
       sh '''
      RELUCK=47.75.174.233/library/tomcat-ss:${branch-woed}    
      echo '
      FROM 47.75.174.233/library/tomcat:v1
      RUN rm -rf /usr/local/apache-tomcat-8.5.59/webapps/*
      ADD target/*.war /usr/local/apache-tomcat-8.5.59/webapps/ROOT.war
      ' > Dockerfile
      ls  
      ls target
      
     docker build -t $RELUCK .
     docker login 47.75.174.233 -u admin -p Harbor12345
     docker push $RELUCK
         
        '''
    stage ('dockr') {
        
        sh '''
        RELUCK=47.75.174.233/library/tomcat-ss:${branch-woed}
        docker pull $RELUCK
        docker run -d -it -p 88:8080 --name meimei  $RELUCK
        
           '''
        
    }
       
   }       
   
    
    
}



mav项目
Publish over SSH

Name  服务器名，随便写，方便记忆即可

Hostname   服务器IP，或者可以被正常解析的服务器名/域名

Username  用于登录的账号

Remote Dictionary    远程目录，绝对路径

Passphrase/Password   密码

Port        SSH端口

#2.Jenkins构建任务

2.1Jenkins任务创建 构建一个maven项目

2.2 配置源代码管理

2.3Publish over SSH配置  构建环境
2.4配置项说明：
配置项   值              说明
Name   appserver              SSH Server名称，根据之前配置选择即可

Source files   target/*.jar   需要传输的文件，支持通配符，编译文件默认都在项目根目录下的target目录中

Remove prefix   target     移除匹配到的文件路径的前缀，如果留空，会在远程服务器上创建对应的目录

Remote directory   helloworld/   远程服务器上的项目目录，该目录会被创建在Publish over SSH配置的远程根目录中(/webroot)

Exec command    ---                 文件传输到远程服务器后执行的命令


APP_NAME=helloworld.jar
cd /webroot/helloworld
mkdir -p logs

#找到包含AppName的进程
PROCESS=`ps -ef|grep $APP_NAME|grep -v grep  |awk '{ print $2}'`
#循环停用进程直到成功
while :
do
  kill -9 $PROCESS > /dev/null 2>&1
  if [ $? -ne 0 ];then
   break
  else
   continue
fi
done
echo 'Stop Successed'

#启动应用
nohup  /usr/java/jdk1.8.0_181/bin/java -jar $APP_NAME >>logs/start.log 2>>logs/startError.log &

#sleep等待15秒后，判断包含AppName的线程是否存在
sleep 15
if test $(pgrep -f $APP_NAME|wc -l) -eq 0
then
   echo "Start Failed"
else
   echo "Start Successed"
fi


运行jar包 nohup java -jar  xxxx.jar &

